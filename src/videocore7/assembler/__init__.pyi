from collections.abc import Callable
from typing import Any

from _videocore7.assembler import ALU as ALU
from _videocore7.assembler import Assembly as Assembly
from _videocore7.assembler import Branch as Branch
from _videocore7.assembler import Label as Label
from _videocore7.assembler import LabelNameSpace as LabelNameSpace
from _videocore7.assembler import Link as Link
from _videocore7.assembler import LoadSignal as LoadSignal
from _videocore7.assembler import LoopHelper
from _videocore7.assembler import Reference as Reference
from _videocore7.assembler import Register as Register
from _videocore7.assembler import Signal as Signal
from _videocore7.assembler import TMULookUpConfig as TMULookUpConfig
from _videocore7.assembler import assemble as assemble
from _videocore7.assembler import qpu as qpu

# Structured programming helpers
loop: LoopHelper
L: Label
R: Reference
b: Callable[..., Branch]  # TODO: typing
link: Link
namespace: Callable[[str], LabelNameSpace]

# Signals
thrsw: Signal
ldunif: Signal
ldunifa: Signal
ldunifrf: LoadSignal
ldunifarf: LoadSignal
ldtmu: LoadSignal
ldvary: LoadSignal
ldvpm: Signal
ldtlb: LoadSignal
ldtlbu: LoadSignal
ucb: Signal
wrtmuc: Signal

# Registers
quad: Register
null: Register
tlb: Register
tlbu: Register
unifa: Register
tmul: Register
tmud: Register
tmua: Register
tmuau: Register
vpm: Register
vpmu: Register
sync: Register
syncu: Register
syncb: Register
tmuc: Register
tmus: Register
tmut: Register
tmur: Register
tmui: Register
tmub: Register
tmudref: Register
tmuoff: Register
tmuscm: Register
tmusf: Register
tmuslod: Register
tmuhs: Register
tmuhscm: Register
tmuhsf: Register
tmuhslod: Register
rep: Register

# Register Alias
broadcast: Register  # rep
quad_broadcast: Register  # quad

rf: list[Register]
rf0: Register
rf1: Register
rf2: Register
rf3: Register
rf4: Register
rf5: Register
rf6: Register
rf7: Register
rf8: Register
rf9: Register
rf10: Register
rf11: Register
rf12: Register
rf13: Register
rf14: Register
rf15: Register
rf16: Register
rf17: Register
rf18: Register
rf19: Register
rf20: Register
rf21: Register
rf22: Register
rf23: Register
rf24: Register
rf25: Register
rf26: Register
rf27: Register
rf28: Register
rf29: Register
rf30: Register
rf31: Register
rf32: Register
rf33: Register
rf34: Register
rf35: Register
rf36: Register
rf37: Register
rf38: Register
rf39: Register
rf40: Register
rf41: Register
rf42: Register
rf43: Register
rf44: Register
rf45: Register
rf46: Register
rf47: Register
rf48: Register
rf49: Register
rf50: Register
rf51: Register
rf52: Register
rf53: Register
rf54: Register
rf55: Register
rf56: Register
rf57: Register
rf58: Register
rf59: Register
rf60: Register
rf61: Register
rf62: Register
rf63: Register

# Add ALU instructions
def fadd(*args: Any, **kwargs: Any) -> ALU: ...
def faddnf(*args: Any, **kwargs: Any) -> ALU: ...
def vfpack(*args: Any, **kwargs: Any) -> ALU: ...
def add(*args: Any, **kwargs: Any) -> ALU: ...
def sub(*args: Any, **kwargs: Any) -> ALU: ...
def fsub(*args: Any, **kwargs: Any) -> ALU: ...
def imin(*args: Any, **kwargs: Any) -> ALU: ...
def imax(*args: Any, **kwargs: Any) -> ALU: ...
def umin(*args: Any, **kwargs: Any) -> ALU: ...
def umax(*args: Any, **kwargs: Any) -> ALU: ...
def shl(*args: Any, **kwargs: Any) -> ALU: ...
def shr(*args: Any, **kwargs: Any) -> ALU: ...
def asr(*args: Any, **kwargs: Any) -> ALU: ...
def ror(*args: Any, **kwargs: Any) -> ALU: ...
def fmin(*args: Any, **kwargs: Any) -> ALU: ...
def fmax(*args: Any, **kwargs: Any) -> ALU: ...
def vfmin(*args: Any, **kwargs: Any) -> ALU: ...
def band(*args: Any, **kwargs: Any) -> ALU: ...
def bor(*args: Any, **kwargs: Any) -> ALU: ...
def bxor(*args: Any, **kwargs: Any) -> ALU: ...
def vadd(*args: Any, **kwargs: Any) -> ALU: ...
def vsub(*args: Any, **kwargs: Any) -> ALU: ...
def bnot(*args: Any, **kwargs: Any) -> ALU: ...
def neg(*args: Any, **kwargs: Any) -> ALU: ...
def flapush(*args: Any, **kwargs: Any) -> ALU: ...
def flbpush(*args: Any, **kwargs: Any) -> ALU: ...
def flpop(*args: Any, **kwargs: Any) -> ALU: ...
def clz(*args: Any, **kwargs: Any) -> ALU: ...
def setmsf(*args: Any, **kwargs: Any) -> ALU: ...
def setrevf(*args: Any, **kwargs: Any) -> ALU: ...
def nop(*args: Any, **kwargs: Any) -> ALU: ...
def tidx(*args: Any, **kwargs: Any) -> ALU: ...
def eidx(*args: Any, **kwargs: Any) -> ALU: ...
def lr(*args: Any, **kwargs: Any) -> ALU: ...
def vfla(*args: Any, **kwargs: Any) -> ALU: ...
def vflna(*args: Any, **kwargs: Any) -> ALU: ...
def vflb(*args: Any, **kwargs: Any) -> ALU: ...
def vflnb(*args: Any, **kwargs: Any) -> ALU: ...
def xcd(*args: Any, **kwargs: Any) -> ALU: ...
def ycd(*args: Any, **kwargs: Any) -> ALU: ...
def msf(*args: Any, **kwargs: Any) -> ALU: ...
def revf(*args: Any, **kwargs: Any) -> ALU: ...
def iid(*args: Any, **kwargs: Any) -> ALU: ...
def sampid(*args: Any, **kwargs: Any) -> ALU: ...
def barrierid(*args: Any, **kwargs: Any) -> ALU: ...
def tmuwt(*args: Any, **kwargs: Any) -> ALU: ...
def vpmwt(*args: Any, **kwargs: Any) -> ALU: ...
def flafirst(*args: Any, **kwargs: Any) -> ALU: ...
def flnafirst(*args: Any, **kwargs: Any) -> ALU: ...
def fxcd(*args: Any, **kwargs: Any) -> ALU: ...
def fycd(*args: Any, **kwargs: Any) -> ALU: ...
def ldvpmv_in(*args: Any, **kwargs: Any) -> ALU: ...
def ldvpmd_in(*args: Any, **kwargs: Any) -> ALU: ...
def ldvpmp(*args: Any, **kwargs: Any) -> ALU: ...
def recip(*args: Any, **kwargs: Any) -> ALU: ...
def rsqrt(*args: Any, **kwargs: Any) -> ALU: ...
def exp(*args: Any, **kwargs: Any) -> ALU: ...
def log(*args: Any, **kwargs: Any) -> ALU: ...
def sin(*args: Any, **kwargs: Any) -> ALU: ...
def rsqrt2(*args: Any, **kwargs: Any) -> ALU: ...
def ballot(*args: Any, **kwargs: Any) -> ALU: ...
def bcastf(*args: Any, **kwargs: Any) -> ALU: ...
def alleq(*args: Any, **kwargs: Any) -> ALU: ...
def allfeq(*args: Any, **kwargs: Any) -> ALU: ...
def ldvpmg_in(*args: Any, **kwargs: Any) -> ALU: ...
def stvpmv(*args: Any, **kwargs: Any) -> ALU: ...
def stvpmd(*args: Any, **kwargs: Any) -> ALU: ...
def stvpmp(*args: Any, **kwargs: Any) -> ALU: ...
def fcmp(*args: Any, **kwargs: Any) -> ALU: ...
def vfmax(*args: Any, **kwargs: Any) -> ALU: ...
def fround(*args: Any, **kwargs: Any) -> ALU: ...
def ftoin(*args: Any, **kwargs: Any) -> ALU: ...
def ftrunc(*args: Any, **kwargs: Any) -> ALU: ...
def ftoiz(*args: Any, **kwargs: Any) -> ALU: ...
def ffloor(*args: Any, **kwargs: Any) -> ALU: ...
def ftouz(*args: Any, **kwargs: Any) -> ALU: ...
def fceil(*args: Any, **kwargs: Any) -> ALU: ...
def ftoc(*args: Any, **kwargs: Any) -> ALU: ...
def fdx(*args: Any, **kwargs: Any) -> ALU: ...
def fdy(*args: Any, **kwargs: Any) -> ALU: ...
def itof(*args: Any, **kwargs: Any) -> ALU: ...
def utof(*args: Any, **kwargs: Any) -> ALU: ...
def vpack(*args: Any, **kwargs: Any) -> ALU: ...
def v8pack(*args: Any, **kwargs: Any) -> ALU: ...
def fmov(*args: Any, **kwargs: Any) -> ALU: ...
def mov(*args: Any, **kwargs: Any) -> ALU: ...
def v10pack(*args: Any, **kwargs: Any) -> ALU: ...
def v11fpack(*args: Any, **kwargs: Any) -> ALU: ...
def quad_rotate(*args: Any, **kwargs: Any) -> ALU: ...
def rotate(*args: Any, **kwargs: Any) -> ALU: ...
def shuffle(*args: Any, **kwargs: Any) -> ALU: ...

# Mul ALU instructions
def umul24(*args: Any, **kwargs: Any) -> ALU: ...
def vfmul(*args: Any, **kwargs: Any) -> ALU: ...
def smul24(*args: Any, **kwargs: Any) -> ALU: ...
def multop(*args: Any, **kwargs: Any) -> ALU: ...
def ftounorm16(*args: Any, **kwargs: Any) -> ALU: ...
def ftosnorm16(*args: Any, **kwargs: Any) -> ALU: ...
def vftounorm8(*args: Any, **kwargs: Any) -> ALU: ...
def vftosnorm8(*args: Any, **kwargs: Any) -> ALU: ...
def vftounorm10lo(*args: Any, **kwargs: Any) -> ALU: ...
def vftounorm10hi(*args: Any, **kwargs: Any) -> ALU: ...
def fmul(*args: Any, **kwargs: Any) -> ALU: ...
